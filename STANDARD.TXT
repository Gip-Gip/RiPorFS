This file is made available under the Creative Commons CC0 1.0 Universal
Public Domain Dedication.

The person who associated a work with this deed has dedicated the work
to the public domain by waiving all of his or her rights to the work
worldwide under copyright law, including all related and neighboring
rights, to the extent allowed by law. You can copy, modify, distribute
and perform the work, even for commercial purposes, all without asking
permission.

Ridge - an unsigned 8-bit integer either after the signature, after a
null-terminated filename, or pointed to by another ridge.


RiPorFS FILE STRUCTURE(v1)

[signature(7 bytes in length)]
[ridges]
[eofs ridge(1 byte)]

RIDGE STRUCTURE(v1)

[ridge value(1 byte)]

RIDGE STRUCTURE(v1)(file data)

[ridge value(1 byte)]
[ridge data (size equal to ridge value)]

RiPorFS FILE STRUCTURE(v2)

[signature (10 bytes)]
[ridges]
[eofs ridge(2 bytes)]

RIDGE STRUCTURE(v2)

[OMC8 checksum(1 byte)]
[ridge value(1 byte)]

RIDGE STRUCTURE(v2)(data ridge)

[OMC8 checksum(1 byte)]
[ridge value(1 byte)]
[ridge data(size is equal to ridge value)]

v1: *FINISHED*

RiPorFS = filesystem signature, ASCII
ridge value 255 = filename ridge, ASCII, terminated by null
ridge value 254 = end-of-filesystem marker
ridge value < 254 = file data, size given by ridge

v2: *IN DEVELOPMENT*

Now every ridge has to have a data ridge behind it
(with the exeption of a few) as any non-data ridges
only describe what the following data ridges contain.

Ridge value...
 0xFF = End of file system
 0xFE = UTF-8 file name
 0xFD = file data for previous file name
 0xFC = UTF-8 named directory start for following files
 0xFB = end previous directory
 0xFA = UTF-8 UNIX Time timestamp for following files
 0xF9 = ASCII DOS-safe file name
 0xF8 = ASCII UNIX permissions(Symbolic notation)
 0xF7 = UTF-8 UNIX user ID
 0xF6 = UTF-8 UNIX group ID

Data ridges are any ridge with a value < 128

For example, a archive containing a single text file
would have this layout:

[signature (10 bytes; "ext128rpfs")]
[file name ridge(2 bytes; 0xFE + 0xFE)]
[file name (11 bytes; checksum of filename(1 byte) + filename size(1 byte) +
    filename(9 bytes; "hello.txt"))]
[file data ridge(2 bytes; 0xFD + 0xFD)]
[file data (14 bytes; checksum of file data(1 byte) + file data size(1 byte) +
    file data(12 bytes; "Hello, World"))]
[EOFS ridge (2 bytes; 0xFF + 0xFF)]

OMC8 checksum C example:

unsigned char OMC8(unsigned char *data, int size)
{
    unsigned char checksum = 0;
    int offset = 0;
    int incrementer = 0;
    int multiplier = 0;
    
    while(offset < size)
    {
        while(multiplier < offset)
        {
            incrementer = *(data + offset);
            while(incrementer != 0)
            {
                checksum ++;
                incrementer --;
                
                if(checksum == 255) checksum = 0;
            }
            
            multiplier ++;
        }
        
        multiplier = 0;
        offset ++;
    }
    return checksum;
}

All software examples can be used by anyone, for anything, and are
provided without warranty or guarentee by the author. The author
shall not be liable for any claim connected to this software.
